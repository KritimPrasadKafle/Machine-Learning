To start the project of th django these are the essential things that we need to know.
1. python -m venv env - to start in a virtual environment
2. cd env, cd Scripts, activate - to start the virtual environment
3. pip install Django - inside the virtual environment
4. django-admin startproject core - to make the project named as core
5. cd core
6. pip install djangorestframework - to install the rest framework
7. python manage.py startapp home - to create the app in the django
8. home and rest_framework - addition in setting.py inside Installed_apps
9. api view is a kind of decorator which converts your existing django function or you can say python function into an api view function.
10. In the views for that particular folder, we write the api's for example:

from rest_framework.decorators import api_view
from rest_framework.response import Response

@api_view(['GET'])
def index(request):
  courses = {
    'course_name': 'Python',
    'learn': ['Flask', 'Django', 'Tornado', 'FastApi'],
    'course_provider': 'Scaler'
  }
  return Response(courses)

11. In standard way we write the routes in api/index something like this way so we will make a folder called as api with the files like __init__.py and urls.py.
12. Then we will register the url patterns in the urls.py in the folder i.e. api:
from home.views import index
from django.urls import path

urlpatterns = [
  path('index/', index)
]
 with the registration in urls.py in the folder i.e. core/urls.py
  path('api/', include('api.urls')),

13. To run server we need to first migrate because django has couple of tables like session. 
python manage.py migrate - to migrate all the tables

14. To run the server: python manage.py runserver

15. Serializer :
If we are a model called as Person: Person.object.all() - returns all the person like [1,2,3,4] -> the data type of this would be QuerySet. This we cannot expose it to the frontend means QuerySet cannot be exposed to the frontend.
It should be in a json format. So, for this we use serializer. Serializer means you pass some data and it converts into a json response. It converts the QuerySet to JSON.
Serializer is a class which helps you to serialize the data in the form of QuerySet to JSON Response and vice versa. The most used serializer is ModelSerializers. 

16. To make the model in django. we need to look into the file called as model.py and should have to fill the things into it:

from django.db import models

# Create your models here.

class Person(models.Model):
  name = models.CharField(max_length=100)
  age = models.IntegerField()

17. Serializer: 
from rest_framework import serializers
from .models import Person

class PeopleSerializer(serializers.ModelSerializer):

  class Meta:
    model = Person
    fields = ['name', 'age']
     

In view
   
@api_view(['GET', 'POST'])
def person(request):
   if request.GET:
      objs = Person.objects.all()
      serializer = PeopleSerializer(objs, many = True)
      return Response(serializer.data)
   else:
      data = request.data 
      serializer = PeopleSerializer(data = data)
      if serializer.is_valid():
         serializer.save()
         return Response(serializer.data)
      
      return Response(serializer.errors)

Put - method doesn't support partial update
Patch - method supports partial update






